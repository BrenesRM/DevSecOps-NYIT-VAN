name: PIPELINE-CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# This part is intentional and needs to be scanned for exposed secrets.
env:
  DOCKER_REGISTRY: brenesrm
  IMAGE_NAME: devsecops-nyit-van
  PASSWORD: "PuraVida!"

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-24.04

    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    steps:
      # 1. Checkout source code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 3. Build & Push the Docker image
      - name: Build & Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          build-args: |
            APP_ENV=${{ secrets.APP_ENV }}

      # 4. Verify Docker image exists
      - name: Verify Docker image
        run: |
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  dast:
    name: ZAP - DAST Test
    needs: build  # Ensure this job runs after the build job
    runs-on: ubuntu-latest
    permissions:
      issues: write
      security-events: write  # Allow reporting security issues

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt  # Ensure dependencies are installed

      - name: Start Flask App
        run: |
          python app.py &  # Run Flask in the background
          sleep 10  # Give Flask time to start

      - name: Check if Flask is Running
        run: curl -I http://localhost:5000 || exit 1  # Ensure server is running

      - name: Run ZAP Full Scan  # More comprehensive than baseline
        uses: zaproxy/action-full-scan@v0.10.0  # Updated to latest version
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target: 'http://localhost:5000'  # Fixed target URL (removed extra space)
          issue_title: 'ZAP Security Full Scan Findings'
          fail_action: false  # Prevents pipeline failure in case of issues
          allow_issue_writing: true
          artifact_name: zap-scan-report  # Ensure artifact name is valid

      - name: Upload ZAP Scan Artifact  # To upload the results as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: zap-scan-report  # Valid artifact name
          path: /path/to/zap/reports  # Path where ZAP reports are saved


      
    
