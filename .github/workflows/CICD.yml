name: PIPELINE-CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# This part is intentional and needs to be scanned for exposed secrets.
env:
  DOCKER_REGISTRY: brenesrm
  IMAGE_NAME: devsecops-nyit-van
  PASSWORD: "PuraVida!"

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-24.04

    steps:
      # 1. Checkout source code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 3. Build & Push the Docker image
      - name: Build & Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          build-args: |
            APP_ENV=${{ secrets.APP_ENV }}

      # 4. Verify Docker image exists
      - name: Verify Docker image
        run: |
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  dockertest:
    name: Container Vulnerability Scanning Test
    needs: build
    runs-on: ubuntu-24.04
    steps:
      # 1. Scan Docker image
      - name: Scan Docker image
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'  # Optional: Limit to high-risk vulnerabilities

      # 2. Upload Trivy scan results to GitHub Security tab
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
       
  Check-Secrets:
    name: Secrets Management Analysis
    needs: dockertest
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Install Detect Secrets
        run: pip install detect-secrets  # Ensure detect-secrets is installed

      - name: Generate Secrets Baseline (if missing)
        run: |
          if [ ! -f ".secrets.baseline" ]; then
            detect-secrets scan > .secrets.baseline
          fi

      - name: Secret Scanner
        run: detect-secrets scan --baseline .secrets.baseline || true  # Allow process to continue

  sast_analysis:
    name: Static Application Security Testing (SAST)
    needs: dockertest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: 'python'

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: 'security'
          output: '../results'
          upload: 'always'
          cleanup-level: 'brutal'
          add-snippets: 'false'
          skip-queries: 'false'
          checkout_path: '${{ github.workspace }}'
          upload-database: 'true'
          wait-for-processing: 'true'
          token: ${{ secrets.GITHUB_TOKEN }}

  DAST_SAST_snyk_AI:
    name: Snyk Application Security Testing (DAST - SAST - SAC)
    needs: SAST_Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Debug SNYK_TOKEN
        run: echo "SNYK_TOKEN is set"
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Authenticate Snyk
        run: snyk auth $SNYK_TOKEN
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/docker@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }} 
        with:
          image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Snyk Code Analysis (SAST)
        run: snyk code test --sarif > snyk-code.sarif || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Open Source Dependency Scan (SCA)
        run: snyk monitor --all-projects || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Upload Snyk Code results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-code.sarif

  dast:
    name: dynamic application security testing (zapdast)
    needs: sast_analysis
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      issues: write
      security-events: write

    steps:
      - name: checkout code
        uses: actions/checkout@v3

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: install dependencies
        run: |
          pip install -r requirements.txt

      - name: start flask app
        run: |
          python app.py &  
          sleep 10

      - name: check if flask is running
        run: curl -I http://localhost:5000 || exit 1

      - name: debug file structure 1
        run: |
          if [ -d "./zap/reports" ]; then
            echo "Directory ./zap/reports exists."
          else
            echo "Directory ./zap/reports does not exist. Creating it..."
            mkdir -p ./zap/reports
          fi
          ls -R ./zap/

      - name: run zap full scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: 'http://localhost:5000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'


      - name: debug file structure
        run: |
          if [ -d "./zap/reports" ]; then
            echo "Directory ./zap/reports exists."
          else
            echo "Directory ./zap/reports does not exist. Creating it..."
            mkdir -p ./zap/reports
          fi
          ls -R ./zap/

      - name: upload zap scan artifact
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-report
          path: ./zap/reports


  CodeScanAIReport:
    name: CodeScanAI Report Generation
    needs: dockertest
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run CodeScanAI Action
        id: codescan-ai
        uses: codescan-ai/codescanai-action@v1.0.1
        env:
          OPENAI_API_KEY: ${{ secrets.CODESCAN_AUTH_TOKEN }}
        with:
          provider: "openai"
          changes_only: true
          pr_number: ${{ github.event.pull_request.number || 0 }}
          repo: ${{ github.repository }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          output_file: "codescanai_report.txt"

      - name: Upload CodeScanAI Report (Artifact)
        uses: actions/upload-artifact@v4
        with:
          name: codescanai-report
          path: codescanai_report.txt

      - name: Convert CodeScanAI Report to SARIF
        run: |
          cat <<EOF > codescanai_report.sarif
          {
            "version": "2.1.0",
            "runs": [
              {
                "tool": { "driver": { "name": "CodeScanAI", "version": "1.0.1" } },
                "results": [
                  {
                    "message": { "text": "CodeScanAI detected issues - check report for details." },
                    "locations": [
                      {
                        "physicalLocation": {
                          "artifactLocation": { "uri": "codescanai_report.txt" },
                          "region": { "startLine": 1 }
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
          EOF

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3  # Fixed: Changed v4 -> v3
        with:
          sarif_file: codescanai_report.sarif

  kubeSecScan:
    name: kubernetSecScan-manifesto
    runs-on: ubuntu-20.04
    needs: dockertest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run kubesec scanner
        uses: controlplaneio/kubesec-action@main
        with:
          input: /github/workspace/k8s/kind-cluster.yaml
          exit-code: "0"
          format: template
          template: template/sarif.tpl
          output: kubesec-results.sarif

      - name: Upload Kubesec scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: kubesec-results.sarif